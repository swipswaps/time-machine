#!/bin/bash
# https://github.com/murkl/time-machine

script_title="Time Machine"

# Script
script_file=$(readlink -f "$0")
script_dir=$(dirname "$script_file")
script_id=$(basename "$script_file")

script_res_dir="$script_dir/res"
script_config_file="$script_res_dir/config"
script_icon_file="$script_res_dir/icon.svg"

# Gui
gui_width=432
gui_height=271
gui_dialog_height=180
desktop_file="$HOME/.local/share/applications/$script_id.desktop"
desktop_icon=true

# Backup
source_dir="$HOME"
destination_dir=""
exclude_file="$script_res_dir/exclude"
log_dir="$script_dir/.log"

# Rsync
rsync_script_url="https://raw.githubusercontent.com/laurent22/rsync-time-backup/master/rsync_tmbackup.sh"
rsync_script="$script_res_dir/rsync_tmbackup.sh"


log() {
	echo "$(date "+%H:%M:%S") $script_id: $1"
}

send_notify() {
    log "$1"
    notify-send -i "$script_icon_file" "$script_title" "$1"
}

# Check dependencies
if ! [ -x "$(command -v zenity)" ]; then
	send_notify "zenity not installed"
	exit 1;
fi
if ! [ -x "$(command -v rsync)" ]; then
	send_notify "rsync not installed"
	exit 1;
fi
if ! [ -x "$(command -v xdg-open)" ]; then
	send_notify "xdg-utils not installed"
	exit 1;
fi

# Create config file
if [ ! -f "$script_config_file" ]; then
    {
	    echo "source_dir=\"$source_dir\""
	    echo "destination_dir=\"$destination_dir\"" 
        echo "gui_width=$gui_width"
        echo "gui_height=$gui_height"
        echo "desktop_icon=$desktop_icon"
    } >> "$script_config_file"
	log "$script_config_file file created"
fi

# Import config file
. "$script_config_file"

# Create exclude file
if [ ! -f "$exclude_file" ]; then
    {
	    echo "[Cc]ache*"
        echo "[Tt]rash*"
	    echo ".cache"
        echo ".gvfs"
        echo "~*" 
    } >> "$exclude_file"
    log "$exclude_file created"
fi

zenity() {
    /usr/bin/zenity --name="$script_id" --title="$script_title" --window-icon="$script_icon_file" --width="$gui_width" --height="$gui_dialog_height" "$@" 2>/dev/null
}

show_zenity_info() {
    log "$1"
    zenity --info --text "$1"
}

show_zenity_error() {
    log "$1"
    zenity --error --text "$1"
}

list_children_pid () {
    local children_pid
    children_pid=$(ps -o pid= --ppid "$1")
    for pid in $children_pid; do
        list_children_pid "$pid"
    done
    echo "$children_pid"
}

show_exec_backup() {
    rm -f -r "$log_dir"
    mkdir "$log_dir"
    result_file="$log_dir/result.txt"
    touch "$destination_dir/backup.marker"
    sh "$rsync_script" --log-dir "$log_dir" "$source_dir" "$destination_dir" "$exclude_file"> "$result_file" & piped_pid=$!
    tail -f /dev/null --pid $piped_pid | ( zenity --progress --text="Backup in progress..." --pulsate --auto-close || kill $(list_children_pid $piped_pid) )
    send_notify "Backup finished"
    log_file="$log_dir/$(basename "$(ls "$log_dir"/*.log)")" 
    zenity --text-info --window-icon="$script_icon_file" --width=600 --height="$gui_height" --filename="$log_file"
    return 0
}

show_browse_backup() {
    log "Browse $destination_dir"
    xdg-open "$destination_dir"
    return 0
}

show_edit_source_dir() {
    directory=$(zenity --file-selection --directory)
    if [ "$directory" != "" ]; then
        replace_config_file_value "source_dir" "$directory"
        send_notify "Source directory changed to: $directory"
        return 1
    fi
    return 0
}

show_edit_destination_dir() {
    directory=$(zenity --file-selection --directory)
    if [ "$directory" != "" ]; then
        replace_config_file_value "destination_dir" "$directory"
        send_notify "Destination directory changed to: $directory"
        return 1
    fi
    return 0
}

show_edit_exclude() {
    res=$(zenity --text-info --height="$gui_height" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$exclude_file")
    if [ $? = 0 ]; then
        echo "$res" > "$exclude_file"
        send_notify "Exclude list saved"
        return 1
    fi
    return 0
}

show_download_script() {
    log "Download $rsync_script_url"
    (
        curl -Lk "$rsync_script_url" -o "$rsync_script"
        chmod +x "$rsync_script"
        echo "# $rsync_script successfully downloaded"
    ) | zenity --progress --text="Downloading $rsync_script" --auto-kill --pulsate
    return 0
}

show_edit_configuration() {
    result=$(zenity --text-info --height="$gui_height" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$script_config_file")
    if [ $? = 0 ]; then
        echo "$result" > "$script_config_file"
        send_notify "$script_config_file saved"
    fi
    return 0
}

replace_config_file_value() {
    key=$1
    value=$2
    sed -i "s#$key=.*#$key=\"$value\"#g" "$script_config_file"
    return 0
}

check_rsync_script() {
    if [ ! -f "$rsync_script" ]; then
        zenity --question --text="$rsync_script not found. Download now?"
        if [ $? = 1 ]; then
            log "User canceled"
            return 1;
        fi
        show_download_script
        return 1
    fi
    return 0
}

check_source_dir() {
    if [ "$source_dir" = "" ]; then
        show_zenity_error "You have to set source dir first!"
        return 1
    fi
    if [ ! -d "$source_dir" ]; then
        show_zenity_error "Source: $source_dir not exists!"
        return 1
    fi
    return 0
}

check_destination_dir() {
    if [ "$destination_dir" = "" ]; then
        show_zenity_error "You have to set destination dir first!"
        return 1
    fi
    if [ ! -d "$destination_dir" ]; then
        show_zenity_error "Destination: $destination_dir not exists!"
        return 1
    fi
    return 0
}

create_desktop_file() {
    if [ ! -f "$desktop_file" ]; then
        rm -f "$desktop_file"
        {
            echo "[Desktop Entry]"
            echo "Name=$script_title" 
            echo "Icon=$script_icon_file"
            echo "Exec=\"$script_file\""
            echo "Type=Application"
        } >> "$desktop_file"
        chmod +x "$desktop_file"
        send_notify "$desktop_file created"
        return 1
    fi
    return 0
}

remove_desktop_file() {
    if [ -f "$desktop_file" ]; then
        rm -f "$desktop_file"
        send_notify "$desktop_file removed"
        return 1
    fi
    return 0
}

# Main
while(true); do

    # Import config file
    . "$script_config_file"
    
    # Create or remove desktop icon
	if [ "$desktop_icon" = "true" ]; then
		create_desktop_file
	else
		remove_desktop_file
	fi

    item_01="Start Backup"
    item_02="Browse Backup"
    item_03="Change Source"
    item_04="Change Destination"
    item_05="Edit Exclude List"
    item_06="Update Script"
    item_07="Configuration"

    last_backup="no backup found"
    if [ -s "$destination_dir/latest" ]; then
        last_backup=$(readlink "$destination_dir/latest")
    fi

    # Show menu
    result=$(zenity --list --height="$gui_height" --radiolist --ok-label="Ok" --cancel-label="Exit" --text='<span font-family="monospace"><small><b>Last Backup:</b>\t'"$last_backup"'\n<b>Source:</b>\t\t'"$source_dir"'\n<b>Destination:</b>\t'"$destination_dir"'\n</small></span>' --hide-header --column="" --column="" TRUE "$item_01" FALSE "$item_02" FALSE "$item_03" FALSE "$item_04" FALSE "$item_05" FALSE "$item_06" FALSE "$item_07")

    # If user exit
    if [ $? = 1 ]; then
        break; exit 0;
    fi
    if [ "$result" = "$item_01" ]; then
        check_source_dir || continue
        check_destination_dir || continue
        check_rsync_script || continue
        show_exec_backup
    fi
    if [ "$result" = "$item_02" ]; then
        check_destination_dir || continue
        show_browse_backup
        exit 0
    fi
    if [ "$result" = "$item_03" ]; then
        show_edit_source_dir
    fi
    if [ "$result" = "$item_04" ]; then
        show_edit_destination_dir
    fi
    if [ "$result" = "$item_05" ]; then
        show_edit_exclude
    fi
    if [ "$result" = "$item_06" ]; then
        zenity --question --text="Update $rsync_script?"
        if [ $? = 1 ]; then
            log "User canceled"
            continue
        fi
        show_download_script
    fi
    if [ "$result" = "$item_07" ]; then
        show_edit_configuration
    fi
    
done
